package com.example.mytemi3


import android.content.Context
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.min
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import coil.compose.rememberAsyncImagePainter
import com.example.mytemi3.ui.Book
import com.example.mytemi3.ui.BookItem
@Composable
fun VoiceToTextScreen(
    spokenText: String,
    books: List<Book>,
    currentPage: Int,
    totalPages: Int,
    onStartListening: () -> Unit,
    onPrevPage: () -> Unit,
    onNextPage: () -> Unit,
    context: Context // ‚úÖ Temi Ïù¥ÎèôÏùÑ ÏúÑÌïú Context Ï∂îÍ∞Ä
) {
    var selectedBook by remember { mutableStateOf<Book?>(null) } // ‚úÖ ÏÑ†ÌÉùÌïú Ï±Ö Ï†ïÎ≥¥ Ï†ÄÏû•
    var showResults by remember { mutableStateOf(false) } // ‚úÖ Í≤ÄÏÉâ ÌõÑ Í≤∞Í≥º ÌëúÏãú Ïó¨Î∂Ä Ï†ÄÏû•

    Box(modifier = Modifier.fillMaxSize()) {
        // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ
        Image(
            painter = painterResource(id = R.drawable.background_image01),
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 120.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // üîç **ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë Î≤ÑÌäº**
            Box(
                modifier = Modifier
                    .width(300.dp)
                    .height(77.dp)
                    .clickable {
                        onStartListening()
                        showResults = true
                    }
            ) {
                Image(
                    painter = painterResource(id = R.drawable.search_icon01),
                    contentDescription = "ÎèÑÏÑúÍ≤ÄÏÉâÌïòÍ∏∞",
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize()
                )
            }

            Text(text = spokenText, fontSize = 18.sp)
            Spacer(modifier = Modifier.height(10.dp))

            // üîç **Í≤ÄÏÉâ Í≤∞Í≥º ÌëúÏãú**
            if (showResults) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(26.dp)
                        .background(Color.White, RoundedCornerShape(12.dp))
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        // üìö **Ï±Ö Î™©Î°ù Í∞ÄÎ°ú Ïä§ÌÅ¨Î°§**
                        LazyRow(
                            modifier = Modifier.fillMaxWidth(),
                            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),
                            horizontalArrangement = Arrangement.Center
                        ) {
                            items(books.take(5)) { book ->
                                BookItem(
                                    book = book,
                                    onClick = { selectedBook = book }
                                )
                            }
                        }

                        // üìÑ **ÌéòÏù¥ÏßÄ ÎÑ§Ïù¥ÏÖò**
                        Row(
                            horizontalArrangement = Arrangement.SpaceBetween,
                            modifier = Modifier.fillMaxWidth().padding(26.dp),
                        ) {
                            Button(onClick = onPrevPage, enabled = currentPage > 1) {
                                Text(text = "Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ")
                            }

                            Text(text = "$currentPage / $totalPages", fontSize = 18.sp, color = Color.Black)

                            Button(onClick = onNextPage, enabled = currentPage < totalPages) {
                                Text(text = "Îã§Ïùå ÌéòÏù¥ÏßÄ")
                            }
                        }

                        // ‚ùå **Í≤ÄÏÉâ Í≤∞Í≥º Îã´Í∏∞ Î≤ÑÌäº**
                        Button(
                            onClick = { showResults = false },
                            modifier = Modifier.align(Alignment.CenterHorizontally)
                        ) {
                            Text(text = "Í≤ÄÏÉâ Í≤∞Í≥º Îã´Í∏∞", fontSize = 18.sp)
                        }
                    }
                }
            }
        }
    }

    // üìñ **ÏÑ†ÌÉùÌïú Ï±Ö Ï†ïÎ≥¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏**
    if (selectedBook != null) {
        val configuration = LocalConfiguration.current
        val screenWidth = configuration.screenWidthDp.dp
        val screenHeight = configuration.screenHeightDp.dp

        val dialogWidth = min(screenWidth * 0.90f, 1000.dp)
        val dialogHeight = min(screenHeight * 0.70f, 800.dp)

        Dialog(
            onDismissRequest = { selectedBook = null },
            properties = DialogProperties(usePlatformDefaultWidth = false)
        ) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier
                        .width(dialogWidth)
                        .height(dialogHeight)
                        .padding(30.dp),
                    shape = RoundedCornerShape(12.dp),
                    color = Color.White
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(30.dp)
                    ) {
                        val imageUrl = selectedBook!!.bImg.replace("http://", "https://")
                        Image(
                            painter = rememberAsyncImagePainter(imageUrl),
                            contentDescription = "Ï±Ö ÌëúÏßÄ",
                            modifier = Modifier
                                .width(250.dp)
                                .height(400.dp)
                                .shadow(4.dp, RoundedCornerShape(8.dp)),
                            contentScale = ContentScale.Crop
                        )

                        Spacer(modifier = Modifier.width(24.dp))

                        Column(
                            modifier = Modifier.weight(1f).padding(16.dp)
                        ) {
                            Text(
                                text = selectedBook!!.bookname,
                                fontSize = 40.sp,
                                color = Color.Black,
                                maxLines = 2,
                                overflow = TextOverflow.Ellipsis,
                                modifier = Modifier.fillMaxWidth()
                            )
                            Spacer(modifier = Modifier.height(12.dp))

                            StudyRoomInfo(selectedBook!!.studyRoom)
                            Spacer(modifier = Modifier.height(20.dp))

                            // ‚úÖ Temi Ïù¥Îèô Î≤ÑÌäº Ï∂îÍ∞ÄÎêú ÏúÑÏπò Ï†ïÎ≥¥
                            BookLocationInfo(selectedBook!!.code, context)

                            Button(
                                onClick = { selectedBook = null },
                                modifier = Modifier.align(Alignment.End)
                            ) {
                                Text(text = "Îã´Í∏∞", fontSize = 25.sp)
                            }
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun StudyRoomInfo(studyRoom: String) {
    if (studyRoom == "[Í∞ïÏÑú]Ïñ¥Î¶∞Ïù¥Ïã§") {
        Button(
            onClick = { /* Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÎèôÏûë Ï∂îÍ∞Ä Í∞ÄÎä• */ },
            modifier = Modifier
                .wrapContentWidth()
                .wrapContentHeight()
                .padding(4.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.Magenta, // Î≤ÑÌäº Î∞∞Í≤ΩÏÉâ
                contentColor = Color.White  // Î≤ÑÌäº ÎÇ¥Î∂Ä Í∏ÄÏûêÏÉâ
            )
        ) {
            Text(
                text = "Ïñ¥Î¶∞Ïù¥Ïã§",
                fontSize = 20.sp
            )
        }
    } else {
        Text(
            text = "ÏúÑÏπòÏ†ïÎ≥¥: $studyRoom",
            fontSize = 20.sp,
            textAlign = TextAlign.Start,
            modifier = Modifier.fillMaxWidth()
        )
    }
}


@Composable
fun BookLocationInfo(bookCode: String, context: Context) {
    // ÏΩîÎìú Í∞íÏùÑ Í∏∞Î∞òÏúºÎ°ú location Î∞è row ÏÑ§Ï†ï
    val (location, row) = getLocationAndRow(bookCode)
    val temiController = TemiController(context)

    Column(
        modifier = Modifier.fillMaxWidth().padding(8.dp)
    ) {
        Text(
            text = "ÏúÑÏπò: $location, Ï§Ñ: $row",
            fontSize = 20.sp,
            textAlign = TextAlign.Start,
            modifier = Modifier.fillMaxWidth()
        )

        // ‚úÖ Temi Ïù¥Îèô Î≤ÑÌäº Ï∂îÍ∞Ä (locationÏù¥ "Ïïå Ïàò ÏóÜÏùå"Ïù¥ ÏïÑÎãê Í≤ΩÏö∞Îßå ÌëúÏãú)
        if (location != "Ïïå Ïàò ÏóÜÏùå") {
            Button(
                onClick = { temiController.moveToLocation(location) },
                modifier = Modifier
                    .wrapContentWidth()
                    .padding(top = 8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Green, // Î≤ÑÌäº Î∞∞Í≤ΩÏÉâ
                    contentColor = Color.White // Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
                )
            ) {
                Text(text = "TemiÎ°ú Ïù¥Îèô", fontSize = 18.sp)
            }
        }
    }
}

// ÏΩîÎìú Í∞íÏùÑ Î∂ÑÏÑùÌïòÏó¨ locationÍ≥º rowÎ•º Î∞òÌôòÌïòÎäî Ìï®Ïàò
fun getLocationAndRow(code: String): Pair<String, String> {
    return when (code) {
        "ÏïÑ457-„Ñ∑57„Ñ±=2" -> "ÏûÖÍµ¨" to "3Ï§Ñ"
        else -> "Ïïå Ïàò ÏóÜÏùå" to "Ïïå Ïàò ÏóÜÏùå"
    }
}

