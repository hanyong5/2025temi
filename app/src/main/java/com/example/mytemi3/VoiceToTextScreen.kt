package com.example.mytemi3


import android.content.Context
import android.speech.tts.TextToSpeech
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.min
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import coil.compose.rememberAsyncImagePainter
import com.example.mytemi3.ui.Book
import com.example.mytemi3.ui.BookItem
import kotlinx.coroutines.delay


@Composable
fun VoiceToTextScreen(
    spokenText: String,
    books: List<Book>,
    currentPage: Int,
    totalPages: Int,
    isLoading: Boolean, // ‚úÖ Ï∂îÍ∞Ä
    onStartListening: () -> Unit,
    onPrevPage: () -> Unit,
    onNextPage: () -> Unit,
    onReset: () -> Unit, // ‚úÖ Ïó¨Í∏∞ Ï∂îÍ∞Ä!
    context: Context, // ‚úÖ Temi Ïù¥ÎèôÏùÑ ÏúÑÌïú Context Ï∂îÍ∞Ä
    type: Int,
    message: String,

) {
    var selectedBook by remember { mutableStateOf<Book?>(null) } // ‚úÖ ÏÑ†ÌÉùÌïú Ï±Ö Ï†ïÎ≥¥ Ï†ÄÏû•
    var showResults by remember { mutableStateOf(false) } // ‚úÖ Í≤ÄÏÉâ ÌõÑ Í≤∞Í≥º ÌëúÏãú Ïó¨Î∂Ä Ï†ÄÏû•
    val PeachBorder = Color(0xFFFFE3B7)
    val scrollState = rememberScrollState()


    val typingMessage = remember { mutableStateOf("") }

    LaunchedEffect(message) {
        typingMessage.value = ""
        message.forEach { char ->
            delay(100L)
            typingMessage.value += char
        }
    }

    if (isLoading) {
        Dialog(onDismissRequest = { }) { // Î∞±Î≤ÑÌäº Îì±ÏúºÎ°ú Îã´ÌûàÏßÄ ÏïäÍ≤å
            Box(

                modifier = Modifier
                    .size(150.dp)
                    .background(Color.White, shape = RoundedCornerShape(16.dp)),
                contentAlignment = Alignment.Center
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {


                    CircularProgressIndicator(
                        modifier = Modifier.size(48.dp),
                        color = Color.Red,
                        strokeWidth = 4.dp
                    )
                    Spacer(modifier = Modifier.height(12.dp))
                    Text("Î°úÎî© Ï§ëÏûÖÎãàÎã§...", fontSize = 16.sp)
                }
            }
        }
    }

        Box(modifier = Modifier.fillMaxSize()) {
            // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ
            Image(
                painter = painterResource(id = R.drawable.background_image01),
                contentDescription = null,
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(top = 120.dp)
            ) {
                // üîÑ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÉÅÌÉú
                val offsetX by animateDpAsState(
                    targetValue = if (showResults) 700.dp else 300.dp,
                    label = "offsetX"
                )
                val offsetY by animateDpAsState(
                    targetValue = if (showResults) 0.dp else 100.dp,
                    label = "offsetY"
                )
                val boxWidth by animateDpAsState(
                    targetValue = if (showResults) 300.dp else 500.dp,
                    label = "width"
                )
                val boxHeight by animateDpAsState(
                    targetValue = if (showResults) 77.dp else 400.dp,
                    label = "height"
                )

                val imageRes = if (showResults) {
                    R.drawable.search_icon01 // Í≤ÄÏÉâ ÌõÑ
                } else {
                    R.drawable.search_icon02 // Í≤ÄÏÉâ Ï†Ñ
                }

                Box(
                    modifier = Modifier
                        .width(boxWidth)
                        .height(boxHeight)
                        .offset(x = offsetX, y = offsetY)
                        .clickable {
                            onStartListening()
                            showResults = true
                        }
                ) {
                    Image(
                        painter = painterResource(id = imageRes),
                        contentDescription = "ÎèÑÏÑúÍ≤ÄÏÉâÌïòÍ∏∞",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier.fillMaxSize()
                    )
                }

//                Text(text = spokenText, fontSize = 18.sp)

                Box(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = spokenText,
                        fontSize = 18.sp,
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
                Spacer(modifier = Modifier.height(10.dp))

                // üîç **Í≤ÄÏÉâ Í≤∞Í≥º ÌëúÏãú**
//                if (showResults && books.isNotEmpty()) {
                    if (showResults) {


                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(26.dp)
//                            .offset(x = 10.dp, y = -350.dp)
                            .background(Color.White, RoundedCornerShape(12.dp))
                            .shadow(5.dp, RoundedCornerShape(12.dp)) // Í∑∏Î¶ºÏûê Ï∂îÍ∞Ä
                            .border(
                                width = 16.dp,
                                color = PeachBorder,
                                shape = RoundedCornerShape(12.dp) // backgroundÏôÄ ÎèôÏùºÌïú shapeÏúºÎ°ú ÏÑ§Ï†ïÌï¥Ïïº ÍπîÎÅîÌï¥Ïöî
                            )

                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp).heightIn(min = 550.dp)
                        ) {
                            // üìö **Ï±Ö Î™©Î°ù Í∞ÄÎ°ú Ïä§ÌÅ¨Î°§**
                            LazyRow(
                                modifier = Modifier.fillMaxWidth(),
                                contentPadding = PaddingValues(horizontal = 16.dp, vertical = 16.dp),
                                horizontalArrangement = Arrangement.Center
                            ) {
                                items(books.take(5)) { book ->
                                    BookItem(
                                        book = book,
                                        onClick = { selectedBook = book }
                                    )
                                }
                            }
                            if (showResults && books.isNotEmpty() && type == 2 ) {
                                // üìÑ **ÌéòÏù¥ÏßÄ ÎÑ§Ïù¥ÏÖò**
                                Row(
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    modifier = Modifier.fillMaxWidth().padding(horizontal = 30.dp)
                                ) {
                                    Button(onClick = onPrevPage, enabled = currentPage > 1) {
                                        Text(text = "Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ")
                                    }

                                    Text(
                                        text = "$currentPage / $totalPages",
                                        fontSize = 20.sp,
                                        color = Color.Black
                                    )

                                    Button(
                                        onClick = onNextPage,
                                        enabled = currentPage < totalPages
                                    ) {
                                        Text(text = "Îã§Ïùå ÌéòÏù¥ÏßÄ")
                                    }
                                }
                            } else if( showResults  && type === 1){
                                Box(
                                    modifier = Modifier
                                        .height(400.dp) // Í∏∞Î≥∏ ÎÜíÏù¥ ÏÑ§Ï†ï
                                        .fillMaxWidth()
                                        .padding(30.dp)
                                        .verticalScroll(scrollState) // Ïä§ÌÅ¨Î°§ Í∞ÄÎä•ÌïòÍ≤å ÏÑ§Ï†ï
                                ) {
                                    Text(
                                        text = typingMessage.value,
                                        fontSize = 50.sp,
                                        color = Color.Gray
                                    )
                                }
                                val temiController = TemiController(context)
                                LaunchedEffect(key1 = message) {
                                    if (message.isNotEmpty()) {
                                        temiController.speak(message)
                                    }
                                }
                            }else{
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(420.dp), // Ï†ÑÏ≤¥ ÌÅ¨Í∏∞ Ï±ÑÏö∞Í∏∞
                                    contentAlignment = Alignment.Center // Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                                ) {
                                    Text(
                                        text = "Í≤ÄÏÉâ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§. ÎåÄÌôîÎ≤ÑÌäºÏùÑ Îã§Ïãú ÎàåÎü¨ Ï£ºÏÑ∏Ïöî",
                                        fontSize = 50.sp,
                                        color = Color.Gray)

                                }




                            }

                            // ‚ùå **Í≤ÄÏÉâ Í≤∞Í≥º Îã´Í∏∞ Î≤ÑÌäº**
                            Button(
                                onClick = {
                                    showResults = false
                                    selectedBook = null
                                    onReset() // ‚úÖ Ï†ÑÏ≤¥ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                                },
                                modifier = Modifier.align(Alignment.CenterHorizontally),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color.Red,         // üî¥ Î∞∞Í≤Ω ÏÉâÏÉÅ
                                    contentColor = Color.White          // üî§ ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
                                )
                            ) {
                                Text(text = "Í≤ÄÏÉâÎÇ¥Ïö©Îã´Í∏∞", fontSize = 25.sp)
                            }
                        }
                    }
                }
            }


            // üìñ **ÏÑ†ÌÉùÌïú Ï±Ö Ï†ïÎ≥¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏**
            if (selectedBook != null) {
                val configuration = LocalConfiguration.current
                val screenWidth = configuration.screenWidthDp.dp
                val screenHeight = configuration.screenHeightDp.dp

                val dialogWidth = min(screenWidth * 0.90f, 1000.dp)
                val dialogHeight = min(screenHeight * 0.70f, 700.dp)

                Dialog(
                    onDismissRequest = { selectedBook = null },
                    properties = DialogProperties(usePlatformDefaultWidth = false)
                ) {
                    Box(
                        modifier = Modifier
                            .background(Color.White, RoundedCornerShape(12.dp))
                            .shadow(5.dp, RoundedCornerShape(12.dp)) // Í∑∏Î¶ºÏûê Ï∂îÍ∞Ä
                            .border(
                                width = 16.dp,
                                color = PeachBorder,
                                shape = RoundedCornerShape(12.dp) // backgroundÏôÄ ÎèôÏùºÌïú shapeÏúºÎ°ú ÏÑ§Ï†ïÌï¥Ïïº ÍπîÎÅîÌï¥Ïöî
                            ),
                        contentAlignment = Alignment.Center
                    ) {
                        Surface(
                            modifier = Modifier
                                .width(dialogWidth)
                                .height(dialogHeight)
                                .padding(30.dp),
                            shape = RoundedCornerShape(12.dp),
                            color = Color.White
                        ) {
                            Row(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .padding(30.dp)
                            ) {

                                val imageUrl = selectedBook!!.bImg.replace("http://", "https://")
                                Column(
                                                                        modifier = Modifier
                                        .width(250.dp)
                                ) {
                                    Image(
                                        painter = rememberAsyncImagePainter(imageUrl),
                                        contentDescription = "Ï±Ö ÌëúÏßÄ",
                                        modifier = Modifier
                                            .width(250.dp)
                                            .height(400.dp)
                                            .shadow(4.dp, RoundedCornerShape(8.dp)),
                                        contentScale = ContentScale.Crop
                                    )

                                    Spacer(modifier = Modifier.height(10.dp)) // Ïù¥ÎØ∏ÏßÄÏôÄ ÌÖçÏä§Ìä∏ Í∞Ñ Í∞ÑÍ≤©

                                    Text(
                                        text = selectedBook!!.state, // Ïòà: "ÎåÄÏ∂ú Í∞ÄÎä•" ÎòêÎäî "ÎåÄÏ∂ú Ï§ë"
                                        fontSize = 20.sp,
                                        color = Color.DarkGray
                                    )
                                    Spacer(modifier = Modifier.height(10.dp)) // Ïù¥ÎØ∏ÏßÄÏôÄ ÌÖçÏä§Ìä∏ Í∞Ñ Í∞ÑÍ≤©
                                    Text(
                                        text = "ÎåÄÏ∂úÏùÄ ÏãúÍ∞ÑÏ∞®Í∞Ä ÏûàÏùÑÏàò ÏûàÏäµÎãàÎã§.", // Ïòà: "ÎåÄÏ∂ú Í∞ÄÎä•" ÎòêÎäî "ÎåÄÏ∂ú Ï§ë"
                                        fontSize = 18.sp,
                                        color = Color.Red
                                    )
                                }



                                Spacer(modifier = Modifier.width(24.dp))

                                Column(
                                    modifier = Modifier.weight(1f).padding(horizontal = 16.dp)
                                ) {
                                    Text(
                                        text = selectedBook!!.bookname,
                                        fontSize = 40.sp,
                                        color = Color.Black,
                                        maxLines = 2,
                                        overflow = TextOverflow.Ellipsis,
                                        modifier = Modifier.fillMaxWidth()
                                    )
                                    Spacer(modifier = Modifier.height(12.dp))

                                    StudyRoomInfo(
                                        studyRoom = selectedBook!!.studyRoom,
                                        author = selectedBook!!.author,
                                        publisher = selectedBook!!.publisher,
                                        code = selectedBook!!.code,
                                        context = context
                                    )
                                    Spacer(modifier = Modifier.height(10.dp))

                                    // ‚úÖ Temi Ïù¥Îèô Î≤ÑÌäº Ï∂îÍ∞ÄÎêú ÏúÑÏπò Ï†ïÎ≥¥
                                   // BookLocationInfo(selectedBook!!.code, context)

                                    Spacer(modifier = Modifier.height(10.dp))
                                    Button(
                                        onClick = { selectedBook = null },
                                        modifier = Modifier.align(Alignment.End)
                                    ) {
                                        Text(text = "Îã´Í∏∞", fontSize = 25.sp)
                                    }


                                }
                            }
                        }
                    }
                }
            }
        }


}



@Composable
fun StudyRoomInfo(
    studyRoom: String,
    author: String,
    publisher: String,
    code:String,
    context: Context
) {
    var showDialog by remember { mutableStateOf(false) }
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 26.dp)
        ) {



            Spacer(modifier = Modifier.height(8.dp))

            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                TitleBox(title = "ÏúÑÏπò")
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = studyRoom,
                    fontSize = 16.sp,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // ÏûëÍ∞Ä Ï†ïÎ≥¥ Ï§Ñ
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                TitleBox(title = "ÏûëÍ∞Ä")
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = author,
                    fontSize = 16.sp,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Ï∂úÌåêÏÇ¨ Ï†ïÎ≥¥ Ï§Ñ
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                TitleBox(title = "Ï∂úÌåêÏÇ¨")
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = publisher,
                    fontSize = 16.sp,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }
            Spacer(modifier = Modifier.height(8.dp))
            // ÏΩîÎìúÏ†ïÎ≥¥
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                TitleBox(title = "CODE")
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = code,
                    fontSize = 16.sp,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }

            Spacer(modifier = Modifier.height(30.dp))
            // ÎèÑÏÑúÍ¥Ä Ï±Ö ÏúÑÏπò
            if (studyRoom != "[Í∞ïÏÑú]Ïñ¥Î¶∞Ïù¥Ïã§") {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    TitleBox1(title = "Î≥∏ ÎèÑÏÑúÎäî Ïñ¥Î¶∞Ïù¥Ïã§Ïóê ÏóÜÏäµÎãàÎã§.")

                }
            }else{
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    TitleBox1(title = "Î≥∏ ÎèÑÏÑúÎäî Ïñ¥Î¶∞Ïù¥Ïã§ ÏúÑÏπòÌïòÍ≥† ÏûàÏäµÎãàÎã§.")

                }
                Spacer(modifier = Modifier.height(10.dp))

                //ÎèÑÏÑúÍ¥Ä ÏúÑÏπòÏ†ïÎ≥¥
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.clickable {

                        showDialog = true


                    } // ‚úÖ ÌÅ¥Î¶≠ Ïãú Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
                ) {
                    TitleBox2(title = "ÎèÑÏÑú ÏúÑÏπòÏ†ïÎ≥¥")

                }


            }
        }



    if (showDialog) {
        Dialog(
            onDismissRequest = { showDialog = false },
            properties = DialogProperties(usePlatformDefaultWidth = false)
        ){
            val PeachBorder = Color(0xFFFFE3B7)
            Surface(
                modifier = Modifier
                    .fillMaxSize()                 // ‚úÖ Í∞ÄÎ°ú Ï†ÑÏ≤¥ Ï±ÑÏö∞Í∏∞
                    .width(500.dp)             // ‚úÖ ÏÑ∏Î°úÎäî ÎÇ¥Ïö©ÎßåÌÅº
                    .padding(30.dp)
                    .background(Color.White, RoundedCornerShape(12.dp))
                    .shadow(5.dp, RoundedCornerShape(12.dp)) // Í∑∏Î¶ºÏûê Ï∂îÍ∞Ä
                    .border(
                        width = 16.dp,
                        color = PeachBorder,
                        shape = RoundedCornerShape(12.dp) // backgroundÏôÄ ÎèôÏùºÌïú shapeÏúºÎ°ú ÏÑ§Ï†ïÌï¥Ïïº ÍπîÎÅîÌï¥Ïöî
                    )
                ,                 // ‚úÖ Í∞ÄÏû•ÏûêÎ¶¨ Ïó¨Î∞±
                shape = RoundedCornerShape(12.dp),
                color = Color.White
            ) {

                Column(
                    modifier = Modifier
                        .fillMaxWidth()              // ‚úÖ ÎÇ¥Î∂ÄÎèÑ Í∞ÄÎ°ú Ï†ÑÏ≤¥
                        .padding(24.dp)



                ) {


                    // 1Ô∏è‚É£ Î®ºÏ†Ä '-'Î°ú ÏûêÎ¶Ñ
                    val dashParts = code.split("-")
                    val firstDashPart = dashParts.firstOrNull() ?: ""


                    val dotParts = firstDashPart.split(".")
                    val mainCodePart = dotParts.firstOrNull() ?: ""


                    val letter = mainCodePart.filter { it in 'Í∞Ä'..'Ìû£' }   // Ïòà: "ÏïÑ", "Ïú†"
                    val number = mainCodePart.filter { it.isDigit() }      // Ïòà: "001" ‚Üí "1"
                    val numberValue = number.toIntOrNull() ?: -1

                    var message = ""
                    var imageResId = R.drawable.default_image



                    when (letter) {
                        "ÏïÑ" -> {
                            when (numberValue) {
                                in 0..99 -> {
                                    message = "000 Ï¥ùÎ•òÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a000
                                }
                                in 100..199 -> {
                                    message = "100 Ï≤†ÌïôÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a100
                                }
                                in 300..399 -> {
                                    message = "300 ÏÇ¨ÌöåÍ≥ºÌïôÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a300
                                }
                                in 400..499 -> {
                                    message = "400 ÏûêÏó∞Í≥ºÌïôÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a400
                                }
                                in 500..599 -> {
                                    message = "500 Í∏∞Ïà†Í≥ºÌïôÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a500
                                }
                                in 600..699 -> {
                                    message = "600 ÏòàÏà†Î°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a600
                                }
                                in 700..799 -> {
                                    message = "700 Ïñ∏Ïñ¥Î°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a700
                                }
                                in 800..899 -> {
                                    message = "800 ÏïÑÎèôÎ¨∏ÌïôÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a800_a
                                }
                                in 900..999 -> {
                                    message = "900 Ïó≠ÏÇ¨Î°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a900
                                }
                            }
                        }
                        "Ïú†" -> {
                            when (numberValue) {
                                in 0..99 -> {
                                    message = "Ïú†ÏïÑ 000Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 100..199 -> {
                                    message = "Ïú†ÏïÑ 100Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 300..399 -> {
                                    message = "Ïú†ÏïÑ 300Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 400..499 -> {
                                    message = "Ïú†ÏïÑ 400Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 500..599 -> {
                                    message = "Ïú†ÏïÑ 500Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 600..699 -> {
                                    message = "Ïú†ÏïÑ 600Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 700..799 -> {
                                    message = "Ïú†ÏïÑ 700Î≤à ÏûÖÎãàÎã§"
                                    imageResId = R.drawable.a999
                                }
                                in 800..899 -> {
                                    message = "Ïú†ÏïÑÎèÑÏÑúÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a800_b
                                }
                                in 900..999 -> {
                                    message = "900 Ïó≠ÏÇ¨Î°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî"
                                    imageResId = R.drawable.a900
                                }
                            }
                        }
                    }




//                    Text(
//                        text = "ÎèÑÏÑúÏ†ïÎ≥¥ $code",
//                        fontSize = 10.sp,
//                        fontWeight = FontWeight.Bold
//                    )

//                    Text(text = "Ïù¥ Ï±ÖÏùò ÏΩîÎìú Í∞íÏùÄ \"$code\" ÏûÖÎãàÎã§.")
                    val scrollState = rememberScrollState()
                    Box(modifier = Modifier.fillMaxSize()) {
                        // Ïä§ÌÅ¨Î°§ Í∞ÄÎä•Ìïú Ïù¥ÎØ∏ÏßÄ Îì± ÏΩòÌÖêÏ∏†
                        Column(
                            modifier = Modifier
                                .fillMaxSize()
                                .verticalScroll(scrollState)
                                .padding(bottom = 80.dp) // Î≤ÑÌäºÏù¥ Í∞ÄÎ¶¨Îäî ÏòÅÏó≠ÎßåÌÅº Ìå®Îî©
                                .padding(horizontal = 30.dp)
                        ) {
                            Image(
                                painter = painterResource(id = imageResId),
                                contentDescription = null,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .heightIn(min = 0.dp, max = Dp.Infinity),
                                contentScale = ContentScale.FillWidth
                            )
                        }

                        // ÌïòÎã® Í≥†Ï†ïÎêú Î≤ÑÌäº Row
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .align(Alignment.BottomCenter)
                                .background(Color.White)
                                .padding(horizontal = 30.dp, vertical = 16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "$letter $numberValue : $code",
                                fontSize = 30.sp
                            )

                            Button(
                                onClick = { showDialog = false },
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color.Red
                                )
                            ) {
                                Text("ÌôïÏù∏", fontSize = 30.sp)
                            }
                        }
                    }



                    val temiController = TemiController(context)
                    // üí¨ TemiÍ∞Ä ÎßêÌïòÎèÑÎ°ù
                    LaunchedEffect(Unit) {
                        temiController.speak(" $message ")
                    }
                }
            }
        }
    }






}


//@Composable
//fun BookLocationInfo(bookCode: String, context: Context) {
//    // ÏΩîÎìú Í∞íÏùÑ Í∏∞Î∞òÏúºÎ°ú location Î∞è row ÏÑ§Ï†ï
//    val (location, row) = getLocationAndRow(bookCode)
//    val temiController = TemiController(context)
//
//    Column(
//        modifier = Modifier.fillMaxWidth().padding(8.dp)
//    ) {
//        Text(
//            text = "ÏúÑÏπò: $location, Ï§Ñ: $row",
//            fontSize = 20.sp,
//            textAlign = TextAlign.Start,
//            modifier = Modifier.fillMaxWidth()
//        )
//
//        if (location != "Ïïå Ïàò ÏóÜÏùå") {
//            Button(
////                onClick = { temiController.moveToLocation(location) },
//
//                onClick = { temiController.speak("ÏïàÎÇ¥Ìï† Ïû•ÏÜåÎäî ÌïúÏÑ±Ïö© ÏûÖÎãàÎã§. ÏûÖÎãàÎã§.") },
//                modifier = Modifier
//                    .wrapContentWidth()
//                    .padding(top = 8.dp),
//                colors = ButtonDefaults.buttonColors(
//                    containerColor = Color.Red, // Î≤ÑÌäº Î∞∞Í≤ΩÏÉâ
//                    contentColor = Color.White // Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
//                )
//            ) {
//                Text(text = "Ï†ïÌôïÌïú ÏúÑÏπò Î≥¥Í∏∞", fontSize = 18.sp)
//            }
//        }
//    }
//}

// ÏΩîÎìú Í∞íÏùÑ Î∂ÑÏÑùÌïòÏó¨ locationÍ≥º rowÎ•º Î∞òÌôòÌïòÎäî Ìï®Ïàò
//fun getLocationAndRow(code: String): Pair<String, String> {
//    return when (code) {
//        "ÏïÑ457-„Ñ∑57„Ñ±=2" -> "ÏûÖÍµ¨" to "3Ï§Ñ"
//        else -> "Ïïå Ïàò ÏóÜÏùå" to "Ïïå Ïàò ÏóÜÏùå"
//    }
//}

@Composable
fun TitleBox(
    title: String,
    modifier: Modifier = Modifier,
    onClick: (() -> Unit)? = null // nullableÎ°ú ÏÑ§Ï†ï
) {
    val boxModifier = modifier
//        .padding(16.dp)
        .clip(RoundedCornerShape(12.dp))
        .background(Color(0xFF5F9FD1))
        .then(
            if (onClick != null) Modifier
                .clickable { onClick() }
                .shadow(6.dp, RoundedCornerShape(12.dp))
            else Modifier
        )
        .padding(horizontal = 20.dp, vertical = 10.dp)

    Box(modifier = boxModifier) {
        Text(
            text = title,
            color = Color.White,
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.Center)
        )
    }
}


@Composable
fun TitleBox1(
    title: String,
    modifier: Modifier = Modifier,
    onClick: (() -> Unit)? = null // nullableÎ°ú ÏÑ§Ï†ï
) {
    val boxModifier = modifier
//        .padding(16.dp)
        .clip(RoundedCornerShape(12.dp))
        .background(Color(0xFFF2593A))
        .then(
            if (onClick != null) Modifier
                .clickable { onClick() }
                .shadow(6.dp, RoundedCornerShape(12.dp))
            else Modifier
        )
        .padding(horizontal = 20.dp, vertical = 10.dp)

    Box(modifier = boxModifier) {
        Text(
            text = title,
            color = Color.White,
            fontSize = 20.sp,
            modifier = Modifier.align(Alignment.Center)
        )
    }
}

@Composable
fun TitleBox2(
    title: String,
    modifier: Modifier = Modifier,
    onClick: (() -> Unit)? = null // nullableÎ°ú ÏÑ§Ï†ï
) {
    val boxModifier = modifier
//        .padding(16.dp)
        .clip(RoundedCornerShape(20.dp))
        .background(Color(0xFFFDAF17))
        .then(
            if (onClick != null) Modifier
                .clickable { onClick() }
                .shadow(6.dp, RoundedCornerShape(20.dp))
            else Modifier
        )
        .padding(horizontal = 20.dp, vertical = 10.dp)

    Box(modifier = boxModifier) {
        Text(
            text = title,
            color = Color.White,
            fontSize = 26.sp,
            modifier = Modifier.align(Alignment.Center)
        )
    }
}